const { mnemonicToWalletKey, mnemonicNew } = require("@ton/crypto");
const { WalletContractV3R1, WalletContractV3R2, WalletContractV4, WalletContractV5R1 } = require("@ton/ton");
const axios = require("axios");
const fs = require("fs");

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  workers: 4,
  delays: [1200, 1500, 1300, 1400], // –†–∞–∑–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
  saveFile: "found_wallets.txt",
  retryDelay: 4000
};

// –ü–†–û–í–ï–†–ï–ù–ù–´–ï –†–ê–ë–û–ß–ò–ï API endpoints
const WORKER_APIS = [
  {
    name: 'toncenter',
    url: (address) => `https://toncenter.com/api/v2/getAddressInformation?address=${address}`,
    parser: (data) => data.ok ? parseInt(data.result.balance, 10) / 1e9 : 0
  },
  {
    name: 'tonapi', 
    url: (address) => `https://tonapi.io/v2/accounts/${address}`,
    parser: (data) => data.balance ? parseInt(data.balance, 10) / 1e9 : 0
  },
  {
    name: 'tonviewer',
    url: (address) => `https://tonviewer.com/api/v2/accounts/${address}`,
    parser: (data) => data.balance ? parseInt(data.balance, 10) / 1e9 : 0
  },
  {
    name: 'ton.sh',
    url: (address) => `https://ton.sh/wallet/${address}/balance`,
    parser: (data) => data.balance ? parseInt(data.balance, 10) / 1e9 : 0
  }
];

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ API (–±—ç–∫–∞–ø—ã)
const ALTERNATIVE_APIS = [
  {
    name: 'toncenter-backup',
    url: (address) => `https://toncenter.com/api/v3/address/${address}/balance`,
    parser: (data) => data.balance ? parseInt(data.balance, 10) / 1e9 : 0
  },
  {
    name: 'tonapi-backup', 
    url: (address) => `https://tonapi.io/v1/account/getInfo?account=${address}`,
    parser: (data) => data.balance ? parseInt(data.balance, 10) / 1e9 : 0
  },
  {
    name: 'dton.io',
    url: (address) => `https://api.dton.io/account/${address}`,
    parser: (data) => data.balance ? parseInt(data.balance, 10) / 1e9 : 0
  },
  {
    name: 'tontech',
    url: (address) => `https://api.tontech.io/account/${address}`,
    parser: (data) => data.balance ? parseInt(data.balance, 10) / 1e9 : 0
  }
];

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
let stats = {
  totalChecks: 0,
  foundWallets: 0,
  startTime: Date.now(),
};

// –¢–∞–π–º–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
const workerTimers = Array(CONFIG.workers).fill().map(() => ({ lastRequest: 0 }));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
async function saveFoundWallet(walletData) {
  const logEntry = `
[${new Date().toLocaleString()}] –ü—Ä–æ–≤–µ—Ä–∫–∞ #${walletData.checkNumber}
–í–æ—Ä–∫–µ—Ä: ${walletData.workerId} (${walletData.api})
–ú–Ω–µ–º–æ–Ω–∏–∫–∞: ${walletData.mnemonic}
–ê–¥—Ä–µ—Å: ${walletData.address}
–í–µ—Ä—Å–∏—è: ${walletData.version}
–ë–∞–ª–∞–Ω—Å: ${walletData.balance.toFixed(6)} TON
----------------------------------------
`;

  fs.appendFileSync(CONFIG.saveFile, logEntry, 'utf8');
  
  console.log('\n' + '='.repeat(60));
  console.log('\x1b[42m\x1b[30müí∞ –ù–ê–ô–î–ï–ù –ö–û–®–ï–õ–ï–ö –° –ë–ê–õ–ê–ù–°–û–ú!\x1b[0m');
  console.log(`\x1b[32m–ü—Ä–æ–≤–µ—Ä–∫–∞: #${walletData.checkNumber}\x1b[0m`);
  console.log(`\x1b[32m–í–æ—Ä–∫–µ—Ä: ${walletData.workerId} (${walletData.api})\x1b[0m`);
  console.log(`\x1b[32m–ê–¥—Ä–µ—Å: ${walletData.address}\x1b[0m`);
  console.log(`\x1b[32m–í–µ—Ä—Å–∏—è: ${walletData.version}\x1b[0m`);
  console.log(`\x1b[32m–ë–∞–ª–∞–Ω—Å: ${walletData.balance.toFixed(6)} TON\x1b[0m`);
  console.log('\x1b[32m' + '='.repeat(60) + '\x1b[0m');
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –±–∞–ª–∞–Ω—Å–∞
function parseBalanceResponse(data, apiName) {
  try {
    switch(apiName) {
      case 'toncenter':
        return data.ok ? parseInt(data.result.balance, 10) / 1e9 : 0;
      
      case 'tonapi':
      case 'tonapi-backup':
        return data.balance ? parseInt(data.balance, 10) / 1e9 : 0;
      
      case 'tonviewer':
        return data.balance ? parseInt(data.balance, 10) / 1e9 : 0;
      
      case 'ton.sh':
        return data.balance ? parseInt(data.balance, 10) / 1e9 : 0;
      
      case 'dton.io':
        return data.balance ? parseInt(data.balance, 10) / 1e9 : 0;
      
      case 'tontech':
        return data.balance ? parseInt(data.balance, 10) / 1e9 : 0;
      
      default:
        return 0;
    }
  } catch (error) {
    return 0;
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
async function checkBalanceWithApi(address, apiConfig, workerId, alternativeApi = null) {
  const now = Date.now();
  const workerTimer = workerTimers[workerId - 1];
  const delay = CONFIG.delays[workerId - 1];
  
  // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
  if (workerTimer.lastRequest > 0) {
    const timeSinceLastRequest = now - workerTimer.lastRequest;
    if (timeSinceLastRequest < delay) {
      await new Promise(resolve => setTimeout(resolve, delay - timeSinceLastRequest));
    }
  }
  
  workerTimer.lastRequest = Date.now();

  const currentApi = alternativeApi || apiConfig;
  
  try {
    const apiUrl = currentApi.url(address);
    const response = await axios.get(apiUrl, {
      timeout: 10000,
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Accept': 'application/json',
        'Referer': 'https://ton.org/'
      }
    });

    const balance = parseBalanceResponse(response.data, currentApi.name);
    
    return { 
      balance: balance, 
      api: currentApi.name,
      success: true 
    };
    
  } catch (error) {
    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 429, 418, 404 –∏–ª–∏ —Å–µ—Ç–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã - –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π API
    if (error.response?.status === 429 || error.response?.status === 418 || 
        error.response?.status === 404 || error.code === 'ENOTFOUND') {
      
      console.log(`\x1b[33m‚ö†Ô∏è  –í–æ—Ä–∫–µ—Ä ${workerId}: ${currentApi.name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π API\x1b[0m`);
      
      // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π API
      const altApi = ALTERNATIVE_APIS[workerId - 1];
      if (altApi) {
        return await checkBalanceWithApi(address, apiConfig, workerId, altApi);
      }
    }
    
    return { 
      balance: 0, 
      api: currentApi.name,
      success: false,
      error: error.message 
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–∞
async function workerProcess(workerId) {
  const apiConfig = WORKER_APIS[workerId - 1];
  console.log(`‚ñ∂Ô∏è  –í–æ—Ä–∫–µ—Ä ${workerId} –∑–∞–ø—É—â–µ–Ω —Å API: ${apiConfig.name}`);

  while (true) {
    try {
      const mnemonic = await mnemonicNew(24);
      const mnemonicPhrase = mnemonic.join(' ');
      
      const keyPair = await mnemonicToWalletKey(mnemonic);

      const walletVersions = [
        { version: 'v3R1', wallet: WalletContractV3R1.create({ workchain: 0, publicKey: keyPair.publicKey }) },
        { version: 'v3R2', wallet: WalletContractV3R2.create({ workchain: 0, publicKey: keyPair.publicKey }) },
        { version: 'v4', wallet: WalletContractV4.create({ workchain: 0, publicKey: keyPair.publicKey }) },
        { version: 'v5R1', wallet: WalletContractV5R1.create({ workchain: 0, publicKey: keyPair.publicKey }) }
      ];

      let foundWallet = null;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–µ—Ä—Å–∏–∏ –∫–æ—à–µ–ª—å–∫–∞
      for (const { version, wallet } of walletVersions) {
        const address = wallet.address.toString();
        const checkNumber = ++stats.totalChecks;
        
        // –í—ã–≤–æ–¥ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–æ–º–µ—Ä | –≤–æ—Ä–∫–µ—Ä | –≤–µ—Ä—Å–∏—è | –∞–¥—Ä–µ—Å
        console.log(`${checkNumber} | ${workerId} | ${version} | ${address}`);
        
        const result = await checkBalanceWithApi(address, apiConfig, workerId);
        
        if (result.balance > 0) {
          foundWallet = {
            workerId,
            checkNumber,
            mnemonic: mnemonicPhrase,
            address: address,
            version: version,
            balance: result.balance,
            api: result.api
          };
          break; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –Ω–∞—à–ª–∏ –±–∞–ª–∞–Ω—Å
        }
      }

      if (foundWallet) {
        stats.foundWallets++;
        await saveFoundWallet(foundWallet);
      }

      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –º–Ω–µ–º–æ–Ω–∏–∫–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 100));

    } catch (error) {
      console.log(`\x1b[31m‚ùå –í–æ—Ä–∫–µ—Ä ${workerId}: ${error.message}\x1b[0m`);
      await new Promise(resolve => setTimeout(resolve, CONFIG.retryDelay));
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log("üéØ TON Scanner —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ API");
  console.log("=================================");
  console.log("‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ API endpoints:");
  console.log("1. toncenter.com - –æ—Å–Ω–æ–≤–Ω–æ–π API");
  console.log("2. tonapi.io/v2 - –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API");  
  console.log("3. tonviewer.com - –ø–æ–ø—É–ª—è—Ä–Ω—ã–π explorer");
  console.log("4. ton.sh - –±—ã—Å—Ç—Ä—ã–π API");
  console.log("=================================");
  console.log("‚è∏Ô∏è  Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n");

  if (!fs.existsSync(CONFIG.saveFile)) {
    fs.writeFileSync(CONFIG.saveFile, "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ TON:\n========================================\n", 'utf8');
  }

  // –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤
  const workers = [];
  for (let i = 1; i <= CONFIG.workers; i++) {
    workers.push(workerProcess(i));
  }

  process.on('SIGINT', async () => {
    console.log("\n\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞...");
    console.log("üìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
    console.log(`   –ü—Ä–æ–≤–µ—Ä–æ–∫: ${stats.totalChecks}`);
    console.log(`   –ù–∞–π–¥–µ–Ω–æ: ${stats.foundWallets}`);
    process.exit(0);
  });

  await Promise.all(workers);
}

main().catch(console.error);